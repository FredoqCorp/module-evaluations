name: CI
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      management: ${{ steps.filter.outputs.management }}
      contracts: ${{ steps.filter.outputs.contracts }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Filter
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            management:
              - 'src/management/**'
              - 'tests/management/**'
            contracts:
              - 'src/contracts/**'

  build-test-management:
    name: Build, Lint, Test (management)
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.management == 'true' }}
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: '1'
      DOTNET_NOLOGO: 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          cache: true
          cache-dependency-path: |
            **/*.csproj
            Directory.Packages.props

      - name: Restore (management.slnf)
        run: dotnet restore slnf/management.slnf

      - name: Lint (dotnet format only management)
        run: |
          dotnet format \
            --verify-no-changes \
            --verbosity minimal \
            --include src/management tests/management \
            --exclude src/management/Infrastructure/Migrations \
            --exclude "**/*ModelSnapshot.cs"

      - name: Build (Release)
        run: dotnet build slnf/management.slnf -c Release --no-restore

      - name: Test with coverage
        run: |
          dotnet test slnf/management.slnf -c Release \
            --no-build \
            --logger "trx;LogFileName=test-results.trx" \
            --results-directory ./TestResults \
            --collect "XPlat Code Coverage" \
            --settings coverlet.runsettings

      - name: Upload test results (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/TestResults/**/*.trx
            **/TestResults/**/coverage.cobertura.xml
            **/TestResults/**/coverage.json
            **/TestResults/**/coverage.info
          if-no-files-found: ignore

      - name: Install ReportGenerator (local tool)
        run: dotnet tool install --tool-path ./.tools dotnet-reportgenerator-globaltool

      - name: Build coverage report (Markdown + HTML)
        run: |
          ./.tools/reportgenerator \
            -reports:"**/TestResults/**/coverage.cobertura.xml" \
            -targetdir:"coveragereport" \
            -reporttypes:"MarkdownSummaryGithub;HtmlInline_AzurePipelines"
          cat coveragereport/SummaryGithub.md >> "$GITHUB_STEP_SUMMARY"

      - name: Upload HTML coverage (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coveragereport

  build-contracts:
    name: Build, Lint (contracts)
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.contracts == 'true' }}
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: '1'
      DOTNET_NOLOGO: 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          cache: true
          cache-dependency-path: |
            **/*.csproj
            Directory.Packages.props

      - name: Restore (contracts.slnf)
        run: dotnet restore slnf/contracts.slnf

      - name: Lint (dotnet format only contracts)
        run: |
          dotnet format \
            --verify-no-changes \
            --verbosity minimal \
            --include src/contracts

      - name: Build (Release)
        run: dotnet build slnf/contracts.slnf -c Release --no-restore

      - name: Pack (NuGet)
        run: |
          OUT_DIR=./artifacts/packages/contracts
          mkdir -p "$OUT_DIR"
          while IFS= read -r proj; do
            echo "Packing $proj"
            dotnet pack "$proj" -c Release -o "$OUT_DIR" /p:IncludeSymbols=true /p:SymbolPackageFormat=snupkg /p:ContinuousIntegrationBuild=true
          done < <(find src/contracts -name '*.csproj' -print)

      - name: Upload NuGet packages (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: contracts-packages
          path: |
            artifacts/packages/contracts/**/*.nupkg
            artifacts/packages/contracts/**/*.snupkg
          if-no-files-found: error
