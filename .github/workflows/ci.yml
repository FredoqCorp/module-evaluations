name: CI
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-management:
    name: Build, Lint, Test (management)
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: '1'
      DOTNET_NOLOGO: 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          cache: true
          cache-dependency-path: |
            **/*.csproj
            Directory.Packages.props

      - name: Restore (management.slnf)
        run: dotnet restore slnf/management.slnf

      - name: Lint (dotnet format only management)
        run: |
          dotnet format \
            --verify-no-changes \
            --verbosity minimal \
            --include src/management tests/management \
            --exclude src/management/Infrastructure/Migrations \
            --exclude "**/*ModelSnapshot.cs"

      - name: Build (Release)
        run: dotnet build slnf/management.slnf -c Release --no-restore

      - name: Test with coverage
        run: |
          dotnet test slnf/management.slnf -c Release \
            --no-build \
            --logger "trx;LogFileName=test-results.trx" \
            --results-directory ./TestResults \
            --collect "XPlat Code Coverage" \
            --settings coverlet.runsettings

      - name: Upload test results (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/TestResults/**/*.trx
            **/TestResults/**/coverage.cobertura.xml
            **/TestResults/**/coverage.json
            **/TestResults/**/coverage.info
          if-no-files-found: ignore

      - name: Install ReportGenerator (local tool)
        run: dotnet tool install --tool-path ./.tools dotnet-reportgenerator-globaltool

      - name: Build coverage report (Markdown + HTML)
        run: |
          dotnet tool run reportgenerator \
            -reports:"**/TestResults/**/coverage.cobertura.xml" \
            -targetdir:"coveragereport" \
            -reporttypes:"MarkdownSummaryGithub;HtmlInline_AzurePipelines"
          cat coveragereport/SummaryGithub.md >> "$GITHUB_STEP_SUMMARY"

      - name: Upload HTML coverage (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coveragereport
